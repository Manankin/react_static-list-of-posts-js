{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","comment","className","name","href","email","body","id","CommentList","comments","length","map","UserInfo","user","PostInfo","post","title","PostList","posts","commentsFromServer","author","usersFromServer","find","postsFromServer","userId","filter","postId","App","ReactDOM","render","document","getElementById"],"mappings":"048IAEaA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACzB,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SACGD,EAAQE,OAGV,OAED,mBACED,UAAU,qBACVE,KAAI,iBAAYH,EAAQI,OAF1B,SAIGJ,EAAQI,WAIb,qBAAKH,UAAU,oBAAf,SACGD,EAAQK,SAjBqBL,EAAQM,KCA/BC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,mCACuB,IAApBA,EAASC,OACR,qCACE,uBACA,mBAAG,UAAQ,oBAAX,gCAGF,qBAAKR,UAAU,cAAf,SACGO,EAASE,KAAI,SAAAV,GAAO,OACnB,cAAC,EAAD,CAAaA,QAASA,GAAcA,EAAQM,YCXzCK,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,mBAAGX,UAAU,WAAWE,KAAI,iBAAYS,EAAKR,OAA7C,mBACMQ,EAAKV,UCAAW,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,sBAAKb,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,mBACMa,EAAKC,SAGX,8BACG,eAED,cAAC,EAAD,CAAUH,KAAME,EAAKF,aAIzB,mBAAGX,UAAU,iBAAb,mBACMa,EAAKT,QAGX,cAAC,EAAD,CAAaG,SAAUM,EAAKN,aAjBCM,EAAKR,KCFzBU,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,qBAAKhB,UAAU,WAAf,SACGgB,EAAMP,KAAI,SAAAI,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKR,UCgB/B,IAAME,EAAWU,EAAmBR,KAAI,SAAAV,GAAO,kCACjDA,GADiD,IAEpDmB,QAX6Bf,EAWNJ,EAAQI,MAVxBgB,EAAgBC,MAAK,SAAAT,GAAI,OAAIA,EAAKR,QAAUA,QAD9C,IAAwBA,KAelBa,EAAQK,EAAgBZ,KAAI,SAAAI,GAAI,kCACxCA,GADwC,IAE3CF,MAtB0BW,EAsBRT,EAAKS,OArBhBH,EAAgBC,MAAK,SAAAT,GAAI,OAAIA,EAAKN,KAAOiB,MAC3C,MAqBLf,UAdkCF,EAcJQ,EAAKR,GAb5BE,EAASgB,QAAO,SAAAxB,GAAO,OAAIA,EAAQyB,SAAWnB,QADhD,IAA6BA,EATRiB,KA0BfG,EAAM,kBACjB,0BAASzB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCAEA,cAAC,EAAD,CAAUgB,MAAOA,QClCrBU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a0a7f29e.chunk.js","sourcesContent":["import './CommentInfo.scss';\n\nexport const CommentInfo = ({ comment }) => (\n  <div className=\"CommentInfo\" key={comment.id}>\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">\n        {comment.name}\n      </strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${comment.email}`}\n      >\n        {comment.email}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {comment.body}\n    </div>\n  </div>\n);\n","import './CommentList.scss';\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  <>\n    {comments.length === 0 ? (\n      <>\n        <hr />\n        <b data-cy=\"NoCommentsMessage\">No comments yet</b>\n      </>\n    ) : (\n      <div className=\"CommentList\">\n        {comments.map(comment => (\n          <CommentInfo comment={comment} key={comment.id} />\n        ))}\n      </div>\n    )}\n  </>\n);\n","import './UserInfo.scss';\n\nexport const UserInfo = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {`${user.name}`}\n  </a>\n);\n","import './PostInfo.scss';\nimport { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\n\nexport const PostInfo = ({ post }) => (\n  <div className=\"PostInfo\" key={post.id}>\n    <div className=\"PostInfo__header\">\n      <h3 className=\"PostInfo__title\">\n        {`${post.title}`}\n      </h3>\n\n      <p>\n        {' Posted by  '}\n\n        <UserInfo user={post.user} />\n      </p>\n    </div>\n\n    <p className=\"PostInfo__body\">\n      {`${post.body}`}\n    </p>\n\n    <CommentList comments={post.comments} />\n  </div>\n);\n","import './PostList.scss';\nimport { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    ))}\n  </div>\n);\n","import './App.scss';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\n\nimport { PostList } from './components/PostList';\n\nexport function getUserById(userId) {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n\nexport function getUserByEmail(email) {\n  return usersFromServer.find(user => user.email === email);\n}\n\nexport function getCommentsByPostID(id) {\n  return comments.filter(comment => comment.postId === id);\n}\n\n// робимо копію масиву коментарів з commentsFromServer та додаємо туди властивість author(як об'єкт)\nexport const comments = commentsFromServer.map(comment => ({\n  ...comment,\n  author: getUserByEmail(comment.email),\n}));\n\n// робимо копію масиву повідомлень з postsFromServer та додаємо туди додаткову властивість user(як об'єкт) та коментарі(як масив)\nexport const posts = postsFromServer.map(post => ({\n  ...post,\n  user: getUserById(post.userId),\n  comments: getCommentsByPostID(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}